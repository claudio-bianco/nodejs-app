name: Node.js CI/CD

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'    
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [ main ]

  workflow_dispatch:

env:
  IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/nodejs-app

jobs:
  build:
      name: Build, Test and Analyze
      runs-on: ubuntu-latest

      steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis

      - name: Ler versão do package.json
        id: pkg
        run: |
          VERSION=$(jq -r .version package.json)
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"
          echo "Versão encontrada: $VERSION"

      - name: Exibir versão
        run: echo "Versão atual é ${{ steps.pkg.outputs.version }}"

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run tests with coverage
        run: npm test

      - name: Prepare Sonar cache dir
        run: mkdir -p ~/.sonar/cache
        
      - name: Cache SonarCloud packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: |
            ${{ runner.os }}-sonar-

      - name: Run SonarCloud analysis
        uses: SonarSource/sonarcloud-github-action@v2
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract version from tag (if exists)
        id: version
        run: |
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          else
            echo "VERSION=latest" >> $GITHUB_OUTPUT
          fi

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:latest            
            ${{ env.IMAGE_NAME }}:${{ steps.pkg.outputs.version }}

      - name: Obter JWT do Docker Hub
        id: login
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN:    ${{ secrets.DOCKERHUB_TOKEN }}
        run: |
          set -euo pipefail
          token=$(curl -fsSL -X POST "https://hub.docker.com/v2/users/login/" \
            -H "Content-Type: application/json" \
            -d "{\"username\":\"$DOCKERHUB_USERNAME\",\"password\":\"$DOCKERHUB_TOKEN\"}" \
            | jq -r .token)
          echo "token=$token" >> "$GITHUB_OUTPUT"

      - name: Obter última tag SemVer (autenticado)
        id: hub
        env:
          NAMESPACE: ${{ vars.DOCKERHUB_NAMESPACE_V }}
          IMAGE:     ${{ vars.IMAGE_NAME_V }}
          TOKEN:     ${{ steps.login.outputs.token }}
        run: |
          set -euo pipefail
          json=$(curl -fsSL "https://hub.docker.com/v2/repositories/${NAMESPACE}/${IMAGE}/tags?page_size=100" \
            -H "Authorization: JWT $TOKEN")

          latest=$(echo "$json" \
            | jq -r '.results[].name' \
            | grep -E "^[0-9]+\.[0-9]+\.[0-9]+$" \
            | sort -V \
            | tail -n1)

          echo "tag=$latest" >> "$GITHUB_OUTPUT"
          echo "Última tag: $latest"

      - name: Resolver digest (Docker Hub) — robusto
        id: digest
        env:
          NAMESPACE: ${{ vars.DOCKERHUB_NAMESPACE_V }}  # ex: seuuser
          IMAGE:     ${{ vars.IMAGE_NAME_V }}           # ex: nodejs-app
          TAG:       ${{ steps.hub.outputs.tag || '1.0.0' }}
        run: |
          set -euo pipefail
          REF="docker.io/${NAMESPACE}/${IMAGE}:${TAG}"
          # Saída “humana” contém a linha "Digest: sha256:..."
          RAW=$(docker buildx imagetools inspect "$REF")
          echo "$RAW" 1>&2
          DIGEST=$(echo "$RAW" | awk -F': ' '/^Digest: /{print $2; exit}')
          if [ -z "${DIGEST:-}" ]; then
            echo "Não foi possível extrair o Digest de $REF" >&2
            exit 1
          fi
          echo "digest=$DIGEST" >> "$GITHUB_OUTPUT"
          echo "Imagem imutável: docker.io/${NAMESPACE}/${IMAGE}@${DIGEST}"

      - name: Echo Digist
        run: |
          echo "Digest: ${{ steps.digest.outputs.digest }}"
